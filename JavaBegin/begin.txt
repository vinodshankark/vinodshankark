Java Begin:
-----------
JDK:
----
Java Development Kit. It is environment for developing Java application.
	JDK contains JRE (Java Runtime Environment) which contains libraries and classes to develop application, inside it contains JVM (Java Virtual Machine). Responsible for executing Java program.
Please use LTS (long term support)

Compile and Run Java Code:
-------------------------
javac Main.java
java Main

Package:
--------
Allows to group and organize java files.

Java Comments:
--------------
Comments are useful to document and ignored when we run Java program.
1. //Single line comment
2. /* 
	Multiline comment 
	*/

Variables:
----------
Conceptually its a box which can store anything.

Premitive Datatype and Reference Datatype

Class and Object
-------------------
-------------------
Using class we can create Object.

class A {}

A obj = new A(); 
// obj = Reference. 
// new A() is Object. New keyword provides space in heap memory.
// A() is constructor.

Constructor
-----------
static methods no need to use object to call.
Constructor is 
1. member method 
2. Same name as class name 
3. Doesnt return anything.
4. Used allocate memory for object.

public A() {}	
public A(int a) {} 
public A(int a, float b) {}


Modifiers in java
-----------------
With class you can use only public, abstract and final
private and protected cannot be used, I may be used inside class.


If variable declared any of the below,
private: specific class.
default: specific Package.
public: Any class or package.
protected: subsidising class.

Static keyword
--------------
With Static keyword dont need to instantiate class. Static variables or methods can be acceesed directly.

Usage is Classname.member.

All non-static members share same static variables.

Static Block
-------------
Its a block which executed when class is loaded into JVM. It is executed before main method
static {}


Encapsulation
--------------
class A { int i;}
class Main {
	psvm() {
		A obj = new A();
		obj.i = 5;
	}
}
Above changing the value without using method. Above example is not encapsulation.

If variable is private above setting is not possible.

To set value we need getters and setters. with this encapsulation is achieved. With this we are making variable hidden.


Inheritance
-----------
All features A class comes to B. 
class A {}
class B extends A{}

1. Single level Inheritance
2. multi level
3. Multiple Inheritance is not supported in Java.

Super
------
By Default every constructor will have keyword super. It will always call the base constructor.
In java every class extends Object class.

Polymorphism
------------
Polymorphism means many behavior.

class A {
	public void show(){

	}
	public void show(int i){

	}
	public void show(float i){

	}
}

psvm() {
	A obj = new A();
	obj.show(); // first method will be called
	obj.show(5); // second method will be called
	obj.show(5.1f); // third method will be called
	// Above is method overloading
}


Methods Overriding
class A {
	public void show() {

	}
}

class B extends A{
	public void show() {

	}
}

psvm() {
	B obj = new B();
	obj.show() // class B method show will be called
}


Final keyword
-------------
Once value assigned to variable it cannot be changed. You can declare without initialization.

For methods by using final keyword user cannot overrride the method.

For class by using final keyword user cannot extends the class.

This keyword
-------------
This is current instance

class A{
	private int x; // instance variable
	public A(int x) { // local variable
		this.x = x; // current instance
	}
}


Anonymous object
-------------
Dont know name object then it is Anonymous object.
Object which dont have reference that is called as Anonymous object. Advantage is it will not use stack memory to store reference value. only it will allocate heap memory to store object and methods.

eg: new A().show();

Abstraction
------------
Abstract methods are those methods which dont have implementation. You cannot have object for abstract class because it incomplete. This has only abstract methods. Abstract class can have normal methods implemented.

Any class which has abstract methods it becomes abstract class. If that extended class implements method becomes concrete class.






