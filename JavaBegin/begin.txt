Java Begin:
-----------
JDK:
----
Java Development Kit. It is environment for developing Java application.
	JDK contains JRE (Java Runtime Environment) which contains libraries and classes to develop application, inside it contains JVM (Java Virtual Machine). Responsible for executing Java program.
Please use LTS (long term support)

Compile and Run Java Code:
-------------------------
javac Main.java
java Main

Package:
--------
Allows to group and organize java files.

Java Comments:
--------------
Comments are useful to document and ignored when we run Java program.
1. //Single line comment
2. /* 
	Multiline comment 
	*/

Variables:
----------
Conceptually its a box which can store anything.
3 Types of variables. Local, Instance and Static

Premitive Datatype and Reference Datatype

Class and Object
-------------------
-------------------
Using class we can create Object. Class is blue print to create object.

class A {}

A obj = new A(); 
// obj = Reference. 
// new A() is Object. New keyword provides space in heap memory.
// A() is constructor.

class B {
int x;
void show()
main() {
B obj = new B() // 101 in Stack memory which will point to object in heap memory
obj.x = 10;
B obj = new B() // 102 in stack memory and Earlier obj=101 is ready for garbage collection
}
}
int i = 5; Stored in Stack memory.
obj also strored in Stack memory.
obj= null eligible for garbage collection

Constructor
-----------
static methods no need to use object to call. It is called automatically
Constructor is 
1. member method 
2. Same name as class name 
3. Doesnt return anything.
4. Used allocate memory for object.

//Constructor overloading
public A() {}	-> Default Constructor
public A(int a) {} -> Parameterized constructor
public A(int a, float b) {}


Constructor can be used for initializing values
class A {
int i;
float j;
public A() {
i=5;
j=6.5f;
}
}

Object Passing in Java:
----------------------
Object passing in Java. Passing object means passing hash code not the object.
In Java everything is call by value.


Modifiers in java
-----------------
With class you can use only public, abstract and final
private and protected cannot be used, I may be used inner class.


If variable declared any of the below,
private: specific class. 
default: specific Package. Cannot access outside package
class A {}// Default modifier
method() // Default modifier. Cannot access outside package
public: Any class or package.
protected: subsidising class.

Javap Command 
------------
javac to compile java to bytecode
javap gives the structure of the java code. What are all the function, variables etc defined.

Static keyword
--------------
With Static keyword dont need to instantiate class. Static variables or methods can be acceesed directly by classname.variable or classname.method.

Usage is Classname.member.

All non-static members share same static variables.

non static variables cannot be used inside static method. Below method will throw error.

class A {
int i
psvm(){
i++
}

Static Block
-------------
Its a block which executed when class is loaded into JVM. It is executed before main method
static {}


Encapsulation
--------------
class A { int i;}
class Main {
	psvm() {
		A obj = new A();
		obj.i = 5;
	}
}
Above changing the value without using method. Above example is not encapsulation.

If variable is private above setting is not possible.

To set value we need getters and setters. with this encapsulation is achieved. With this we are making variable hidden.


Inheritance
-----------
All features A class comes to B. 
class A {}
class B extends A{}

1. Single level Inheritance
2. multi level
3. Multiple Inheritance is not supported in Java.

Super
------
By Default every constructor will have keyword super. It will always call the base constructor.
In java every class extends Object class.

Polymorphism
------------
Polymorphism means many behavior.

class A {
	public void show(){

	}
	public void show(int i){

	}
	public void show(float i){

	}
}

psvm() {
	A obj = new A();
	obj.show(); // first method will be called
	obj.show(5); // second method will be called
	obj.show(5.1f); // third method will be called
	// Above is method overloading
}


Methods Overriding
class A {
	public void show() {

	}
}

class B extends A{
	public void show() {

	}
}

psvm() {
	B obj = new B();
	obj.show() // class B method show will be called
}


Final keyword
-------------
Once value assigned to variable it cannot be changed. You can declare without initialization.

For methods by using final keyword user cannot overrride the method.

For class by using final keyword user cannot extends the class.

This keyword
-------------
This is current instance

class A{
	private int x; // instance variable
	public A(int x) { // local variable
		this.x = x; // current instance
	}
}


Anonymous object
-------------
Dont know name object then it is Anonymous object.
Object which dont have reference that is called as Anonymous object. Advantage is it will not use stack memory to store reference value. only it will allocate heap memory to store object and methods.

eg: new A().show();

Abstraction
------------
Abstract methods are those methods which dont have implementation. You cannot have object for abstract class because it incomplete. This has only abstract methods. Abstract class can have normal methods implemented.

Any class which has abstract methods it becomes abstract class. If that extended class implements method becomes concrete class.

Interface
----------
To support multiple inheritance we need to use interface.
In interface you can declare method, but cannot define method. By default interface method is abstract.

interface A {
	public void show();
}

class B implements A {
	public void show() {
		sout("hello")
	}

	public void display() {
		sout("hi")
	}
}

B obj = new B();
obj.show();
obj.display();

For interface you cannot create constructor and you cannot have object.
A obj = new B();
obj.show();
obj.display(); // This will not work because it is not part of A class

3 types if interface:
Marker Interface -> Without any methods or dont have any method
SAM(Single abstract method) -> functional interface when we use lamda expression -> which has only 1 method 
Normal -> This is normal interface.

Interface in java8
-----------------
Default Methods and Static Methods.

How to define method in interface ?
create interface
interface I {
	void add();
	default void show() { // To define need to use default keyword.

	} 
}

Interface J {
	default void show() {}
}

class implements I, J {
	public void show() { // Need to overrride show since it is part both the interface. If it is part of only one interface then no need to overrride.

	}
}

Class has more power, It will hide interface method

Interface I {
	default void show() {}
}

class J {
	public void show() {}
}

class X implements I, extends J {
	
}
obj.show() // will call class method not the interface.

Static Methods in interface
---------------------------
interface I {
	Static void show() {

	}
}

You call interface method like below
I.show();


Marker Interface
-------------
class Demo implements P{
	void show() {
		sout("demo");
	}
}

class Main {
	psvm() {
		Demo obj = new Demo();
		if( obj instanceOf P) {
			obj.show()
		}
		else {
			sout("No permission")
		}
	}
}

Interface P {
	
}

Lots of Interfaces like serializable, Remote.

